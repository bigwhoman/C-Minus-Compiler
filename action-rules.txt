Program -> Declaration-list
Declaration-list -> Declaration Declaration-list  
Declaration-list -> '' 
Declaration -> Declaration-initial Declaration-prime
Declaration-initial -> Type-specifier #pid ID
Declaration-prime -> Fun-declaration-prime 
Declaration-prime -> Var-declaration-prime
Var-declaration-prime -> ; #variable_declared
Var-declaration-prime -> [ #array_size NUM ] ; #array_declared
Fun-declaration-prime -> ( Params ) #function_params_declared Compound-stmt
Type-specifier -> int #int_type
Type-specifier -> void #void_type
Params -> int #int_type #pid ID Param-prime Param-list
Params -> void
Param-list -> , Param Param-list
Param-list -> ''
Param -> Declaration-initial Param-prime
Param-prime -> [ ] #array_param
Param-prime -> '' #scalar_param
Compound-stmt -> { Declaration-list Statement-list }
Statement-list -> Statement Statement-list
Statement-list -> ''
Statement -> Expression-stmt 
Statement -> Compound-stmt 
Statement -> Selection-stmt 
Statement -> Iteration-stmt 
Statement -> Return-stmt
Expression-stmt -> Expression ; #pop_1 -> pop one to remove the statement result from stack
Expression-stmt -> break ; #break
Expression-stmt -> ;
Selection-stmt -> if ( Expression ) Statement Else-stmt
Else-stmt -> endif
Else-stmt -> else Statement endif
Iteration-stmt -> for (Expression; Expression; Expression) Statement
Return-stmt -> return Return-stmt-prime
Return-stmt-prime -> ; | Expression ;
Expression -> Simple-expression-zegond | ID B
B -> = Expression | [ Expression ] H | Simple-expression-prime
H -> = Expression | G D C
Simple-expression-zegond -> Additive-expression-zegond C
Simple-expression-prime -> Additive-expression-prime C
C -> Relop Additive-expression | ''
Relop -> < | ==
Additive-expression -> Term D
Additive-expression-prime -> Term-prime D
Additive-expression-zegond -> Term-zegond D
D -> Addop Term D | ''
Addop -> + | -
Term -> Signed-factor G
Term-prime -> Signed-factor-prime G
Term-zegond -> Signed-factor-zegond G
G -> * Signed-factor G | ''
Signed-factor -> + Factor | - Factor | Factor
Signed-factor-prime -> Factor-prime
Signed-factor-zegond -> + Factor | - Factor | Factor-zegond
Factor -> ( Expression ) | ID Var-call-prime | NUM
Var-call-prime -> ( Args ) | Var-prime
Var-prime -> [ Expression ] | ''
Factor-prime -> ( Args ) | ''
Factor-zegond -> ( Expression ) | NUM
Args -> Arg-list | ''
Arg-list -> Expression Arg-list-prime
Arg-list-prime -> , Expression Arg-list-prime | ''